generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Payment_Status {
  PAID
  INITIATED
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  sessions       Session[]
  accounts       Account[]
  OrderDetails   OrderDetails[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OrderDetails {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  name      String
  phone     String
  city      String
  state     String
  address   String
  pincode   String
  status    Payment_Status @default(INITIATED)
  oid       String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

